{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.14","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":9598242,"sourceType":"datasetVersion","datasetId":5855171}],"dockerImageVersionId":30786,"isInternetEnabled":false,"language":"python","sourceType":"script","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-11T03:34:29.264768Z\",\"iopub.execute_input\":\"2024-10-11T03:34:29.265174Z\",\"iopub.status.idle\":\"2024-10-11T03:34:32.287268Z\",\"shell.execute_reply.started\":\"2024-10-11T03:34:29.265133Z\",\"shell.execute_reply\":\"2024-10-11T03:34:32.285989Z\"}}\nimport pandas as pd\nimport numpy as np\nfrom sklearn.neighbors import NearestNeighbors\nfrom sklearn.metrics.pairwise import cosine_similarity\n\n# Load the MovieLens 100k dataset\n# Assuming the file is 'u.data' from the MovieLens 100k dataset\ncolumns = ['user_id', 'item_id', 'rating', 'timestamp']\n\ndata = pd.read_csv('/kaggle/input/recommender/u.data',sep='\\t', names=columns)\n\n\n# Create a user-item matrix\nuser_item_matrix = data.pivot_table(index='user_id', columns='item_id', values='rating')\n\n# Fill missing ratings with 0 (or you can use other imputation methods like mean)\nuser_item_matrix.fillna(0, inplace=True)\n\n# Convert to a numpy array\nuser_item_matrix = user_item_matrix.values\n\nprint(\"User-Item Matrix shape:\", user_item_matrix.shape)\n\n\n# %% [code] {\"execution\":{\"iopub.status.busy\":\"2024-10-11T03:38:42.196211Z\",\"iopub.execute_input\":\"2024-10-11T03:38:42.196722Z\",\"iopub.status.idle\":\"2024-10-11T03:38:42.351753Z\",\"shell.execute_reply.started\":\"2024-10-11T03:38:42.196676Z\",\"shell.execute_reply\":\"2024-10-11T03:38:42.350533Z\"}}\n# Transpose user-item matrix to get item-user matrix\nitem_user_matrix = user_item_matrix.T\n\n# Compute cosine similarity between items\nitem_similarity = cosine_similarity(item_user_matrix)\n\n# Display item similarity matrix\nprint(\"Item Similarity Matrix:\\n\", item_similarity)\n\n# Fit KNN on item-user matrix to find similar items\nknn = NearestNeighbors(metric='cosine', algorithm='brute')\nknn.fit(item_user_matrix)\n\n# Example: Predict rating for User 1 on Item 50\nuser_idx = 0  # User 1\nitem_idx = 49  # Item 50\n\n# Get the user's ratings for other items\nuser_ratings = user_item_matrix[user_idx]\n\n# Find similar items to Item 50\ndistances, indices = knn.kneighbors([item_user_matrix[item_idx]], n_neighbors=5)\n\n# Exclude the first item itself\nsimilar_items = indices[0][1:]\n\n# Predict the rating using the user's ratings for similar items\npredicted_rating = np.mean(user_ratings[similar_items])\nprint(f\"Predicted rating for User {user_idx+1} on Item {item_idx+1}: {predicted_rating}\")\n\n\n# %% [code]\n","metadata":{"_uuid":"6ea016e5-3076-4839-ab19-503f00071cd2","_cell_guid":"13039b72-9e0d-4040-bb9c-ceba9d388c79","collapsed":false,"jupyter":{"outputs_hidden":false},"trusted":true},"execution_count":null,"outputs":[]}]}